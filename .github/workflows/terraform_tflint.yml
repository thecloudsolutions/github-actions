name: Terraform TFLint

on:
  workflow_call:
    inputs:
      terraform-directory:
        required: false
        type: string
        default: "."

jobs:
  tflint:
    name: Run TFLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Copy TFLint config
        run: cp configs/.tflint.hcl .tflint.hcl

      - name: Run TFLint recursively
        shell: bash
        run: |
          EXIT_CODE=0

          find "${{ inputs.terraform-directory }}" -type d | while read -r dir; do
            if ls "$dir"/*.tf > /dev/null 2>&1; then
              display_name="$dir"
              [ "$dir" = "." ] && display_name="the main folder"
              echo "Running TFLint in $display_name"

              cd "$dir" || continue

              # Run tflint JSON once
              raw_output=$(tflint --format json 2>tflint_stderr.log)
              tflint_status=$?

              cd - > /dev/null

              if [ "$tflint_status" -ne 0 ]; then
                echo "TFLint exited with code $tflint_status in $display_name"
                cat "$dir/tflint_stderr.log"
                EXIT_CODE=1
                continue
              fi

              if [ -z "$raw_output" ]; then
                echo "TFLint returned no output in $display_name"
                EXIT_CODE=1
                continue
              fi

              # Check JSON validity
              echo "$raw_output" | jq empty 2>/dev/null
              if [ $? -ne 0 ]; then
                echo "Invalid JSON output from TFLint in $display_name"
                echo "$raw_output"
                EXIT_CODE=1
                continue
              fi

              # Extract counts
              error_count=$(echo "$raw_output" | jq '[.diagnostics[] | select(.severity == "ERROR")] | length')
              warning_count=$(echo "$raw_output" | jq '[.diagnostics[] | select(.severity == "WARNING")] | length')
              notice_count=$(echo "$raw_output" | jq '[.diagnostics[] | select(.severity == "NOTICE")] | length')

              if [ "$error_count" -gt 0 ]; then
                echo "TFLint found $error_count errors in $display_name"
                EXIT_CODE=1
              elif [ "$warning_count" -gt 0 ]; then
                echo "TFLint found $warning_count warnings in $display_name"
                EXIT_CODE=1
              elif [ "$notice_count" -gt 0 ]; then
                echo "TFLint found $notice_count notices in $display_name"
              else
                echo "No issues found in $display_name"
              fi
            fi
          done

          exit $EXIT_CODE
